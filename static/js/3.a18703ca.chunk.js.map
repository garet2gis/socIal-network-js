{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","DialogItemStyled","styled","div","props","theme","colorPalettes","second","body","media","phone","isFirst","css","DialogItem","name","MessageStyled","other","borderRadius","Message","className","classes","message","DialogsWrapper","DialogsStyled","MessageWindowStyled","MessageWrapper","Textarea","FormControl","SendMessageFormStyled","form","StyledButtonFlexEnd","StyledButton","FlexTextarea","DialogsReduxForm","reduxForm","onSubmitSuccess","formValues","dispatch","reset","onSubmit","handleSubmit","Field","placeholder","component","validate","isMessage","onKeyPress","e","key","shiftKey","preventDefault","target","value","values","type","Dialogs","dialogs","messages","addMessage","dialogElements","map","d","id","messageElements","m","messagesEnd","useRef","useEffect","current","scrollIntoView","behavior","ref","data","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","mapDispatchToProps","compose","dialogsPage"],"mappings":"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","file":"static/js/3.a18703ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs___FYBH\",\"active\":\"Dialogs_active__3U01P\",\"dialogsItems\":\"Dialogs_dialogsItems__2olaJ\",\"messages\":\"Dialogs_messages__2uxeN\",\"writeMessageArea\":\"Dialogs_writeMessageArea__ZF4Ex\",\"message\":\"Dialogs_message__31BUG\"};","import React from \"react\";\r\nimport styled, {css} from \"styled-components\";\r\n\r\nconst DialogItemStyled = styled.div`\r\n    display:flex;\r\n    background-color:${props => props.theme.colorPalettes.second.body};\r\n    transition: 0.3s;\r\n    padding:30px;\r\n    :hover{\r\n        transition: 0.7s;\r\n        filter:brightness(120%);\r\n    }\r\n    @media ${props => props.theme.media.phone}{\r\n        padding:2px;\r\n        flex-grow:1;\r\n        margin-bottom:5px;\r\n    } \r\n    \r\n    ${(props) => props.isFirst &&\r\n    css`\r\n        filter:brightness(90%);\r\n        :hover{\r\n            filter:brightness(90%);\r\n        }\r\n    `}\r\n    \r\n    \r\n    \r\n    \r\n\r\n`\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    //let path = `/dialogs/${props.id}`\r\n    let isFirst = false;\r\n    //hardcode\r\n\r\n    if (props.name === 'Dmitry') {\r\n        isFirst = true;\r\n    }\r\n\r\n    return (\r\n        <DialogItemStyled isFirst = {isFirst}>\r\n            {/*<NavLink to={path}>{props.name}</NavLink>*/}\r\n            {props.name}\r\n        </DialogItemStyled>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from './../Dialogs.module.css';\r\nimport styled from \"styled-components\";\r\n\r\nconst MessageStyled = styled.div`\r\n    white-space: pre-wrap;\r\n    overflow-wrap: break-word;\r\n    border: 2px solid ${props => props.theme.colorPalettes.second.other};\r\n    border-radius: ${props => props.theme.borderRadius || \"0px\"};\r\n    margin: 7px 0px;\r\n    align-self:center;\r\n    width:90%;\r\n    padding:5px;\r\n    background-color:white;\r\n`\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <MessageStyled className={classes.message}>\r\n            {props.message}\r\n        </MessageStyled>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {useEffect, useRef} from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {FormControl} from \"../common/FormsControls/FormsControls\";\r\nimport {isMessage} from \"../../utils/validators/validators\";\r\nimport styled from \"styled-components\";\r\nimport {StyledButton} from \"../styled/StyledButton\";\r\n\r\n\r\nconst DialogsWrapper = styled.div`\r\n    display: flex;\r\n    width:100%;\r\n    height:100%;\r\n    flex:1 0 100%;\r\n    justify-content: space-between;\r\n    @media ${props => props.theme.media.phone}{\r\n        flex-direction:column;\r\n    } \r\n`\r\nconst DialogsStyled = styled.div`\r\n    display: flex;\r\n    flex-direction:column;\r\n    flex:0 0 30%;\r\n    @media ${props => props.theme.media.phone}{\r\n        flex:0 0 100%;\r\n        flex-direction:row;\r\n        flex-wrap:wrap;\r\n    } \r\n   \r\n`\r\n\r\n\r\nconst MessageWindowStyled = styled.div`\r\n    display: flex;\r\n    flex-direction:column;\r\n    flex:0 0 70%;\r\n    \r\n    @media ${props => props.theme.media.phone}{\r\n        flex:1 0 100%;\r\n    } \r\n   \r\n    \r\n`\r\nconst MessageWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction:column;\r\n    flex-grow:1;\r\n    overflow-y:scroll;\r\n    height:100px;\r\n    \r\n    ::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: ${props => props.theme.colorPalettes.second.other}; \r\n        border-radius: ${props => props.theme.borderRadius || \"0px\"};\r\n        width:5px;\r\n        height:5px;\r\n    }\r\n      \r\n`\r\n\r\n\r\nconst Dialogs = ({dialogs, messages, addMessage}) => {\r\n    let dialogElements = dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>);\r\n    let messageElements = messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>);\r\n\r\n    let messagesEnd = useRef(null);\r\n\r\n    let onSubmit = (data) => {\r\n\r\n        addMessage(data.message);\r\n    }\r\n\r\n    useEffect(() => {\r\n        messagesEnd.current.scrollIntoView({behavior: \"auto\"});\r\n    }, [messages]);\r\n\r\n    return (\r\n\r\n        <DialogsWrapper>\r\n            <DialogsStyled>\r\n                {dialogElements}\r\n            </DialogsStyled>\r\n            <MessageWindowStyled>\r\n                <MessageWrapper>\r\n                    {messageElements}\r\n                    <div ref={messagesEnd}/>\r\n                </MessageWrapper>\r\n                <DialogsReduxForm onSubmit={onSubmit} messages={messages}/>\r\n            </MessageWindowStyled>\r\n        </DialogsWrapper>\r\n\r\n\r\n    )\r\n}\r\n\r\nconst Textarea = FormControl('textarea', '100%', false);\r\n\r\n\r\nconst SendMessageFormStyled = styled.form`\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content:space-evenly;\r\n    margin:10px 0px;\r\n`\r\nconst StyledButtonFlexEnd = styled(StyledButton)`\r\n    align-self:center;\r\n    \r\n`\r\nconst FlexTextarea = styled.div`\r\n    flex: 0 0 80%;\r\n`\r\n\r\nconst DialogsForm = (props) => {\r\n    const addMessage = e => {\r\n        if (e.key === \"Enter\" && e.shiftKey === false) {\r\n            e.preventDefault();\r\n            if (e.target.value) {\r\n                props.handleSubmit(props.values);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <SendMessageFormStyled onSubmit={props.handleSubmit}>\r\n            <FlexTextarea>\r\n                <Field placeholder={'Enter message'} name='message' component={Textarea}\r\n                       validate={[isMessage]} onKeyPress={addMessage}/>\r\n            </FlexTextarea>\r\n            <StyledButtonFlexEnd type=\"submit\" value=\"Send\"/>\r\n\r\n        </SendMessageFormStyled>\r\n    )\r\n}\r\n\r\n\r\nconst afterSubmit = (formValues, dispatch) => {\r\n    dispatch(reset(\"message\"));\r\n}\r\n\r\n\r\nconst DialogsReduxForm = reduxForm({form: 'message', onSubmitSuccess: afterSubmit})(DialogsForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nconst withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component{\r\n        render() {\r\n            if (!this.props.isAuth) return (<Redirect to='/login'/>)\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent);\r\n}\r\n\r\nexport default withAuthRedirect;","import {addMessage} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = {addMessage};\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(Dialogs)\r\n"],"sourceRoot":""}